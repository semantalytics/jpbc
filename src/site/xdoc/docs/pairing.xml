<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>jPBC : Docs - Pairing Functions</title>
        <author email="decaro@dia.unisa.it">Angelo De Caro</author>
    </properties>

    <body>
        <section name="Pairing Functions">
            <p>
                Before elements can be initialized and manipulated for cryptographic operations, an instance of the
                <a href="../java-docs/api/it/unisa/dia/gas/jpbc/Pairing.html">
                    <code>
                        <strong style="color:red">it.unisa.dia.gas.jpbc.Pairing</strong>
                    </code>
                </a>
                interface must be obtained.
            </p>

            <p>
                Pairings are initialized from pairing parameters. Go
                <a href="./curvegenerator.html">here</a>
                to see how to do that.
            </p>

            <subsection name="Notation">
                We use:
                <ol>
                    <li>
                        <strong style="color:red">
                            <code>G1</code>
                        </strong>
                        and
                        <strong style="color:red">
                            <code>G2</code>
                        </strong>
                        to denote the
                        <strong style="color:red">input</strong>
                        groups to the pairing and
                    </li>
                    <li>
                        <strong style="color:red">
                            <code>GT</code>
                        </strong>
                        for the
                        <strong style="color:red">output</strong>
                        group. (All have order r)
                    </li>
                    <li>
                        <strong style="color:red">
                            <code>Zr</code>
                        </strong>
                        which means the
                        <strong style="color:red">ring of integers</strong>
                        modulo r.
                    </li>
                </ol>

                <p>
                    <code>G1</code> is the smaller group (the group of points over the base field). With symmetric pairings, <code>G1</code> = <code>G2</code>.
                    <br/>
                    The elements of <code>G2</code> are at least as long as <code>G1</code>; <code>G1</code> is guaranteed to be the shorter of the two. Sometimes
                    <code>G1</code> and <code>G2</code> are the same group (i.e. the pairing is symmetric) so their elements can be mixed freely. In
                    this case the
                    <code>Pairing#isSymmetric()</code>
                    method returns <code>true</code>.
                </p>

                <br/>
                <br/>

                <p>
                    The pairing is a bilinear map that takes two elements as input, one from <code>G1</code> and one from
                    <code>G2</code>, and outputs an element of <code>GT</code>.
                </p>
            </subsection>

            <subsection name="Accessing Groups">
                The Pairing interface provides some methods to access the groups:

                <source xml:space="preserve">/* Return G1 */
Field G1 = <strong style="color:green">pairing.getG1();</strong>

/* Return G2 */
Field G2 = <strong style="color:green">pairing.getG2();</strong>

/* Return GT */
Field GT = <strong style="color:green">pairing.getGT();</strong>

/* Return Zr */
Field Zr = <strong style="color:green">pairing.getZr();</strong></source>
            </subsection>


            <a name="initializing"/>
            <subsection name="Initializing Pairings">
                <p>
                    To create an instance of the
                    <a href="../java-docs/api/it/unisa/dia/gas/jpbc/Pairing.html">
                        <code>
                            <strong style="color:red">it.unisa.dia.gas.jpbc.Pairing</strong>
                        </code>
                    </a>
                    interface you can use the following:
                </p>

                <ol>
                    <li>
                        <p>
                            <strong style="color:red">Java Porting</strong>
                            : you can use a factory. Each curve definition bring with it the curve's type used.
                            Using this information the factory chooses the right implementation.
                        </p>
                        <source>import it.unisa.dia.gas.plaf.jpbc.pairing.PairingFactory;

CurveParams curveParams = new CurveParams().load("curve.properties");
Pairing pairing = <strong style="color:green">PairingFactory.getPairing(curveParams);</strong>
                        </source>
                    </li>
                    <li>
                        <p>
                            <strong style="color:red">Java Wrapper</strong>
                            : which uses PBC to execute all the computations. Go
                            <a href="./pbcwrapper.html">here</a>
                            to see how to start with the wrapper.
                        </p>
                        <source>import it.unisa.dia.gas.plaf.jpbc.pbc.PBCPairing;

CurveParams curveParams = new CurveParams().load("curve.properties");
Pairing pairing = <strong style="color:green">new PBCPairing(curveParams);</strong>
                        </source>
                    </li>
                </ol>

            </subsection>

            <a name="applying"/>
            <subsection name="Applying pairings">
                <p>
                    The following applies the bilinear map described by pairing. The element
                    <code>out</code>
                    will be set to the map
                    applied to
                    <code>in1</code>
                    and
                    <code>in2</code>
                    , that is
                    <code>out = e(in1, in2)</code>
                    .
                    <code>in1</code>
                    must be in the group
                    <code><code>G1</code></code>
                    ,
                    <code>in2</code>
                    must be in the
                    group
                    <code><code>G2</code></code>
                    . out will lie in the group
                    <code><code><code>GT</code></code></code>
                    .
                </p>
                <source>
Element in1 = pairing.get<code>G1</code>().newRandomElement();
Element in2 = pairing.get<code>G2</code>().newRandomElement();
Element out = <strong style="color:green">pairing.pairing(in1, in2);</strong>
                </source>

                <p>
                    There is another way to apply the pairing which uses a pre-processing technic . So if you have for many times
                    the same first input (that in <code>G1</code>) you can use the following to reduce the time used to compute
                    the pairing.
                    <br/>
                    The reference interface is
                    <code><strong style="color:red">it.unisa.dia.gas.jpbc.PairingPreProcessing</strong></code>
                </p>

                <source xml:space="preserve">
/* Get ready to perform a pairing whose first input is in1,
   store the results of time-saving precomputation in ppp. */

Element in1 = pairing.get<code>G1</code>().newRandomElement();
<strong style="color:green">PairingPreProcessing ppp = pairing.pairing(in1);</strong>

/* Compute the pairing using in2 and the preprocessed information
   stored in ppp. The inputs to the pairing are the element
   previously used to initialize ppp and the element in2. */

Element in2 = pairing.get<code>G2</code>().newRandomElement();
Element out = <strong style="color:green">ppp.pairing(in2);</strong>
                </source>
            </subsection>
        </section>
    </body>
</document>
