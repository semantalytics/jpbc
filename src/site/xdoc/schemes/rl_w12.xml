<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>Java Pairing-Based Cryptography Library : Schemes - Functional Encryption for Regular Languages</title>
        <author email="decaro@dia.unisa.it">Angelo De Caro</author>
    </properties>

    <body>
        <section name="Functional Encryption for Regular Languages">
            <subsection name="Authors">
                Brent Waters
            </subsection>

            <subsection name="Abstract">
                We provide a functional encryption system that supports functionality for regular languages. In our
                system a secret key is associated with a Deterministic Finite Automata (DFA) M. A ciphertext CT encrypts
                a message m and is associated with an arbitrary length string w. A user is able to decrypt the
                ciphertext CT if and only if the DFA M associated with his private key accepts the string w.
                Compared with other known functional encryption systems, this is the first system where the
                functionality is capable of recognizing an unbounded language. For example, in (Key-Policy)
                Attribute-Based Encryption (ABE) a private key SK is associated with a single boolean formula φ which
                operates over a fixed number of boolean variables from the ciphertext. In contrast, in our system a DFA
                M will meaningfully operate over an arbitrary length input w.
                We propose a system that utilizes bilinear groups. Our solution is a “public index” system, where the
                message m is hidden, but the string w is not. We prove security in the selective model under a variant
                of the decision l-Bilinear Diffie-Hellman Exponent (BDHE) assumption that we call the decision
                l-Expanded BDHE problem.
            </subsection>

            <subsection name="URL">
                <a href="http://eprint.iacr.org/2012/384.pdf">
                    http://eprint.iacr.org/2012/384.pdf
                </a>
            </subsection>
        </section>

        <section name="Usage of the scheme">
<pre>

<a name="l1"><span class="ln">1    </span></a><span class="s0">package </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.rl.w12;
<a name="l2"><span class="ln">2    </span></a>
<a name="l3"><span class="ln">3    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.kem.KeyEncapsulationMechanism;
<a name="l4"><span class="ln">4    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.AbstractJPBCCryptoTest;
<a name="l5"><span class="ln">5    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.rl.w12.engines.Alphabet;
<a name="l6"><span class="ln">6    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.dfa.DFA;
<a name="l7"><span class="ln">7    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.rl.w12.engines.RLW12KemEngine;
<a name="l8"><span class="ln">8    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.rl.w12.generators.RLW12KeyPairGenerator;
<a name="l9"><span class="ln">9    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.rl.w12.generators.RLW12ParametersGenerator;
<a name="l10"><span class="ln">10   </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.rl.w12.generators.RLW12SecretKeyGenerator;
<a name="l11"><span class="ln">11   </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.rl.w12.params.*;
<a name="l12"><span class="ln">12   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.AsymmetricCipherKeyPair;
<a name="l13"><span class="ln">13   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.CipherParameters;
<a name="l14"><span class="ln">14   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.InvalidCipherTextException;
<a name="l15"><span class="ln">15   </span></a></span><span class="s0">import </span><span class="s1">org.junit.Test;
<a name="l16"><span class="ln">16   </span></a>
<a name="l17"><span class="ln">17   </span></a></span><span class="s0">import </span><span class="s1">java.security.SecureRandom;
<a name="l18"><span class="ln">18   </span></a></span><span class="s0">import </span><span class="s1">java.util.Arrays;
<a name="l19"><span class="ln">19   </span></a>
<a name="l20"><span class="ln">20   </span></a></span><span class="s0">import static </span><span class="s1">org.junit.Assert.*;
<a name="l21"><span class="ln">21   </span></a>
<a name="l22"><span class="ln">22   </span></a></span><span class="s2">/**
<a name="l23"><span class="ln">23   </span></a> * </span><span class="s3">@author </span><span class="s2">Angelo De Caro
<a name="l24"><span class="ln">24   </span></a> */</span><span class="s1">
<a name="l25"><span class="ln">25   </span></a></span><span class="s0">public class </span><span class="s1">RLW12KEMEngineTest </span><span class="s0">extends </span><span class="s1">AbstractJPBCCryptoTest {
<a name="l26"><span class="ln">26   </span></a>
<a name="l27"><span class="ln">27   </span></a>
<a name="l28"><span class="ln">28   </span></a>    </span><span class="s0">public </span><span class="s1">RLW12KEMEngineTest(</span><span class="s0">boolean </span><span class="s1">usePBC, String curvePath) {
<a name="l29"><span class="ln">29   </span></a>        </span><span class="s0">super</span><span class="s1">(usePBC, curvePath);
<a name="l30"><span class="ln">30   </span></a>    }
<a name="l31"><span class="ln">31   </span></a>
<a name="l32"><span class="ln">32   </span></a>    @Test
<a name="l33"><span class="ln">33   </span></a>    </span><span class="s0">public void </span><span class="s1">testRLW12KEMEngine() {
<a name="l34"><span class="ln">34   </span></a>        DFA dfa = </span><span class="s0">new </span><span class="s1">DFA(</span><span class="s4">2</span><span class="s1">);
<a name="l35"><span class="ln">35   </span></a>        dfa.addFinalState(</span><span class="s4">0</span><span class="s1">);
<a name="l36"><span class="ln">36   </span></a>        dfa.addTransition(</span><span class="s4">0</span><span class="s1">, </span><span class="s5">'0'</span><span class="s1">, </span><span class="s4">1</span><span class="s1">);
<a name="l37"><span class="ln">37   </span></a>        dfa.addTransition(</span><span class="s4">0</span><span class="s1">, </span><span class="s5">'1'</span><span class="s1">, </span><span class="s4">0</span><span class="s1">);
<a name="l38"><span class="ln">38   </span></a>        dfa.addTransition(</span><span class="s4">1</span><span class="s1">, </span><span class="s5">'0'</span><span class="s1">, </span><span class="s4">0</span><span class="s1">);
<a name="l39"><span class="ln">39   </span></a>        dfa.addTransition(</span><span class="s4">1</span><span class="s1">, </span><span class="s5">'1'</span><span class="s1">, </span><span class="s4">1</span><span class="s1">);
<a name="l40"><span class="ln">40   </span></a>
<a name="l41"><span class="ln">41   </span></a>        Alphabet alphabet = </span><span class="s0">new </span><span class="s1">Alphabet();
<a name="l42"><span class="ln">42   </span></a>        alphabet.addLetter(</span><span class="s5">'0'</span><span class="s1">);
<a name="l43"><span class="ln">43   </span></a>        alphabet.addLetter(</span><span class="s5">'1'</span><span class="s1">);
<a name="l44"><span class="ln">44   </span></a>
<a name="l45"><span class="ln">45   </span></a>        AsymmetricCipherKeyPair keyPair = setup(createParameters(alphabet));
<a name="l46"><span class="ln">46   </span></a>        CipherParameters secretKey = keyGen(keyPair.getPublic(), keyPair.getPrivate(), dfa);
<a name="l47"><span class="ln">47   </span></a>
<a name="l48"><span class="ln">48   </span></a>        String w = </span><span class="s5">&quot;00111100&quot;</span><span class="s1">;
<a name="l49"><span class="ln">49   </span></a>        assertTrue(dfa.accept(w));
<a name="l50"><span class="ln">50   </span></a>        </span><span class="s0">byte</span><span class="s1">[][] ct = encaps(keyPair.getPublic(), w);
<a name="l51"><span class="ln">51   </span></a>        assertEquals(</span><span class="s0">true</span><span class="s1">, Arrays.equals(ct[</span><span class="s4">0</span><span class="s1">], decaps(secretKey, ct[</span><span class="s4">1</span><span class="s1">])));
<a name="l52"><span class="ln">52   </span></a>
<a name="l53"><span class="ln">53   </span></a>        w = </span><span class="s5">&quot;01111100&quot;</span><span class="s1">;
<a name="l54"><span class="ln">54   </span></a>        assertFalse(dfa.accept(w));
<a name="l55"><span class="ln">55   </span></a>        ct = encaps(keyPair.getPublic(), </span><span class="s5">&quot;01111100&quot;</span><span class="s1">);
<a name="l56"><span class="ln">56   </span></a>        assertEquals(</span><span class="s0">false</span><span class="s1">, Arrays.equals(ct[</span><span class="s4">0</span><span class="s1">], decaps(secretKey, ct[</span><span class="s4">1</span><span class="s1">])));
<a name="l57"><span class="ln">57   </span></a>    }
<a name="l58"><span class="ln">58   </span></a>
<a name="l59"><span class="ln">59   </span></a>
<a name="l60"><span class="ln">60   </span></a>    </span><span class="s0">protected </span><span class="s1">RLW12Parameters createParameters(Alphabet alphabet) {
<a name="l61"><span class="ln">61   </span></a>        </span><span class="s0">return new </span><span class="s1">RLW12ParametersGenerator().init(parameters, alphabet).generateParameters();
<a name="l62"><span class="ln">62   </span></a>    }
<a name="l63"><span class="ln">63   </span></a>
<a name="l64"><span class="ln">64   </span></a>    </span><span class="s0">protected </span><span class="s1">AsymmetricCipherKeyPair setup(RLW12Parameters parameters) {
<a name="l65"><span class="ln">65   </span></a>        RLW12KeyPairGenerator setup = </span><span class="s0">new </span><span class="s1">RLW12KeyPairGenerator();
<a name="l66"><span class="ln">66   </span></a>        setup.init(</span><span class="s0">new </span><span class="s1">RLW12KeyPairGenerationParameters(
<a name="l67"><span class="ln">67   </span></a>                </span><span class="s0">new </span><span class="s1">SecureRandom(),
<a name="l68"><span class="ln">68   </span></a>                parameters
<a name="l69"><span class="ln">69   </span></a>        ));
<a name="l70"><span class="ln">70   </span></a>
<a name="l71"><span class="ln">71   </span></a>        </span><span class="s0">return </span><span class="s1">setup.generateKeyPair();
<a name="l72"><span class="ln">72   </span></a>    }
<a name="l73"><span class="ln">73   </span></a>
<a name="l74"><span class="ln">74   </span></a>    </span><span class="s0">protected byte</span><span class="s1">[][] encaps(CipherParameters publicKey, String w) {
<a name="l75"><span class="ln">75   </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l76"><span class="ln">76   </span></a>            KeyEncapsulationMechanism kem = </span><span class="s0">new </span><span class="s1">RLW12KemEngine();
<a name="l77"><span class="ln">77   </span></a>            kem.init(</span><span class="s0">true</span><span class="s1">, </span><span class="s0">new </span><span class="s1">RLW12EncryptionParameters((RLW12PublicKeyParameters) publicKey, w));
<a name="l78"><span class="ln">78   </span></a>
<a name="l79"><span class="ln">79   </span></a>            </span><span class="s0">byte</span><span class="s1">[] ciphertext = kem.processBlock(</span><span class="s0">new byte</span><span class="s1">[</span><span class="s4">0</span><span class="s1">], </span><span class="s4">0</span><span class="s1">, </span><span class="s4">0</span><span class="s1">);
<a name="l80"><span class="ln">80   </span></a>
<a name="l81"><span class="ln">81   </span></a>            assertNotNull(ciphertext);
<a name="l82"><span class="ln">82   </span></a>            assertNotSame(</span><span class="s4">0</span><span class="s1">, ciphertext.length);
<a name="l83"><span class="ln">83   </span></a>
<a name="l84"><span class="ln">84   </span></a>            </span><span class="s0">byte</span><span class="s1">[] key = Arrays.copyOfRange(ciphertext, </span><span class="s4">0</span><span class="s1">, kem.getKeyBlockSize());
<a name="l85"><span class="ln">85   </span></a>            </span><span class="s0">byte</span><span class="s1">[] ct = Arrays.copyOfRange(ciphertext, kem.getKeyBlockSize(), ciphertext.length);
<a name="l86"><span class="ln">86   </span></a>
<a name="l87"><span class="ln">87   </span></a>            </span><span class="s0">return new byte</span><span class="s1">[][]{key, ct};
<a name="l88"><span class="ln">88   </span></a>        } </span><span class="s0">catch </span><span class="s1">(InvalidCipherTextException e) {
<a name="l89"><span class="ln">89   </span></a>            e.printStackTrace();
<a name="l90"><span class="ln">90   </span></a>            fail(e.getMessage());
<a name="l91"><span class="ln">91   </span></a>        }
<a name="l92"><span class="ln">92   </span></a>        </span><span class="s0">return null</span><span class="s1">;
<a name="l93"><span class="ln">93   </span></a>    }
<a name="l94"><span class="ln">94   </span></a>
<a name="l95"><span class="ln">95   </span></a>    </span><span class="s0">protected </span><span class="s1">CipherParameters keyGen(CipherParameters publicKey, CipherParameters masterSecretKey, DFA dfa) {
<a name="l96"><span class="ln">96   </span></a>        </span><span class="s2">// Init the Generator</span><span class="s1">
<a name="l97"><span class="ln">97   </span></a>        RLW12SecretKeyGenerator keyGen = </span><span class="s0">new </span><span class="s1">RLW12SecretKeyGenerator();
<a name="l98"><span class="ln">98   </span></a>        keyGen.init(</span><span class="s0">new </span><span class="s1">RLW12SecretKeyGenerationParameters(
<a name="l99"><span class="ln">99   </span></a>                (RLW12PublicKeyParameters) publicKey,
<a name="l100"><span class="ln">100  </span></a>                (RLW12MasterSecretKeyParameters) masterSecretKey,
<a name="l101"><span class="ln">101  </span></a>                dfa
<a name="l102"><span class="ln">102  </span></a>        ));
<a name="l103"><span class="ln">103  </span></a>
<a name="l104"><span class="ln">104  </span></a>        </span><span class="s2">// Generate the key</span><span class="s1">
<a name="l105"><span class="ln">105  </span></a>        </span><span class="s0">return </span><span class="s1">keyGen.generateKey();
<a name="l106"><span class="ln">106  </span></a>    }
<a name="l107"><span class="ln">107  </span></a>
<a name="l108"><span class="ln">108  </span></a>
<a name="l109"><span class="ln">109  </span></a>    </span><span class="s0">protected byte</span><span class="s1">[] decaps(CipherParameters secretKey, </span><span class="s0">byte</span><span class="s1">[] ciphertext) {
<a name="l110"><span class="ln">110  </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l111"><span class="ln">111  </span></a>            KeyEncapsulationMechanism kem = </span><span class="s0">new </span><span class="s1">RLW12KemEngine();
<a name="l112"><span class="ln">112  </span></a>
<a name="l113"><span class="ln">113  </span></a>            kem.init(</span><span class="s0">false</span><span class="s1">, secretKey);
<a name="l114"><span class="ln">114  </span></a>            </span><span class="s0">byte</span><span class="s1">[] key = kem.processBlock(ciphertext, </span><span class="s4">0</span><span class="s1">, ciphertext.length);
<a name="l115"><span class="ln">115  </span></a>
<a name="l116"><span class="ln">116  </span></a>            assertNotNull(key);
<a name="l117"><span class="ln">117  </span></a>            assertNotSame(</span><span class="s4">0</span><span class="s1">, key.length);
<a name="l118"><span class="ln">118  </span></a>
<a name="l119"><span class="ln">119  </span></a>            </span><span class="s0">return </span><span class="s1">key;
<a name="l120"><span class="ln">120  </span></a>        } </span><span class="s0">catch </span><span class="s1">(InvalidCipherTextException e) {
<a name="l121"><span class="ln">121  </span></a>            e.printStackTrace();
<a name="l122"><span class="ln">122  </span></a>            fail(e.getMessage());
<a name="l123"><span class="ln">123  </span></a>        }
<a name="l124"><span class="ln">124  </span></a>
<a name="l125"><span class="ln">125  </span></a>        </span><span class="s0">return null</span><span class="s1">;
<a name="l126"><span class="ln">126  </span></a>    }
<a name="l127"><span class="ln">127  </span></a>
<a name="l128"><span class="ln">128  </span></a>
<a name="l129"><span class="ln">129  </span></a>}
<a name="l130"><span class="ln">130  </span></a>
<a name="l131"><span class="ln">131  </span></a></span></pre>
        </section>

    </body>
</document>
