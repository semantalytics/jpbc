<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>Java Pairing-Based Cryptography Library : Schemes - Unbounded HIBE and Attribute-Based Encryption</title>
        <author email="jpbclib@gmail.com">Angelo De Caro</author>
    </properties>

    <body>
        <section name="Unbounded HIBE and Attribute-Based Encryption">
            <subsection name="Authors">
                A. Lewko and B. Waters
            </subsection>

            <subsection name="Abstract">
                In this work, we present HIBE and ABE schemes which are ``unbounded" in the sense that the public
                parameters do not impose additional limitations on the functionality of the systems. In all previous
                constructions of HIBE in the standard model, a maximum hierarchy depth had to be fixed at setup. In all
                previous constructions of ABE in the standard model, either a small universe size or a bound on the size
                of attribute sets had to be fixed at setup. Our constructions avoid these limitations. We use a nested
                dual system encryption argument to prove full security for our HIBE scheme and selective security for
                our ABE scheme, both in the standard model and relying on static assumptions. Our ABE scheme supports
                LSSS matrices as access structures and also provides delegation capabilities to users.
            </subsection>

            <subsection name="URL">
                <a href="http://eprint.iacr.org/2010/197.pdf">
                    http://eprint.iacr.org/2010/197.pdf
                </a>
            </subsection>
        </section>

        <section name="Usage of the HIBE scheme">
<pre>

<a name="l1"><span class="ln">1    </span></a><span class="s0">package </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.ibe.lw11;
<a name="l2"><span class="ln">2    </span></a>
<a name="l3"><span class="ln">3    </span></a></span><span class="s0">import <a href="../../../../../../../../../it/unisa/dia/gas/crypto/jpbc/AbstractJPBCCryptoTest.java.html">it.unisa.dia.gas.crypto.jpbc.AbstractJPBCCryptoTest</a></span><span class="s1">;
<a name="l4"><span class="ln">4    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.ibe.lw11.engines.UHIBELW11PredicateOnlyEngine;
<a name="l5"><span class="ln">5    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.ibe.lw11.generators.UHIBELW11KeyPairGenerator;
<a name="l6"><span class="ln">6    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.ibe.lw11.generators.UHIBELW11SecretKeyGenerator;
<a name="l7"><span class="ln">7    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.fe.ibe.lw11.params.*;
<a name="l8"><span class="ln">8    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.jpbc.Element;
<a name="l9"><span class="ln">9    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.jpbc.Pairing;
<a name="l10"><span class="ln">10   </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.plaf.jpbc.pairing.PairingFactory;
<a name="l11"><span class="ln">11   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.AsymmetricBlockCipher;
<a name="l12"><span class="ln">12   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.AsymmetricCipherKeyPair;
<a name="l13"><span class="ln">13   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.CipherParameters;
<a name="l14"><span class="ln">14   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.InvalidCipherTextException;
<a name="l15"><span class="ln">15   </span></a></span><span class="s0">import </span><span class="s1">org.junit.Test;
<a name="l16"><span class="ln">16   </span></a>
<a name="l17"><span class="ln">17   </span></a></span><span class="s0">import static </span><span class="s1">org.junit.Assert.*;
<a name="l18"><span class="ln">18   </span></a>
<a name="l19"><span class="ln">19   </span></a></span><span class="s2">/**
<a name="l20"><span class="ln">20   </span></a> * </span><span class="s3">@author </span><span class="s2">Angelo De Caro
<a name="l21"><span class="ln">21   </span></a> */</span><span class="s1">
<a name="l22"><span class="ln">22   </span></a></span><span class="s0">public class </span><span class="s1">UHIBELW11PredicateOnlyEngineTest </span><span class="s0">extends <a href="../../../../../../../../../it/unisa/dia/gas/crypto/jpbc/AbstractJPBCCryptoTest.java.html">AbstractJPBCCryptoTest</a> </span><span class="s1">{
<a name="l23"><span class="ln">23   </span></a>
<a name="l24"><span class="ln">24   </span></a>
<a name="l25"><span class="ln">25   </span></a>    </span><span class="s0">public </span><span class="s1">UHIBELW11PredicateOnlyEngineTest(</span><span class="s0">boolean </span><span class="s1">usePBC, String parametersPath) {
<a name="l26"><span class="ln">26   </span></a>        </span><span class="s0">super</span><span class="s1">(usePBC, parametersPath);
<a name="l27"><span class="ln">27   </span></a>    }
<a name="l28"><span class="ln">28   </span></a>
<a name="l29"><span class="ln">29   </span></a>    @Test
<a name="l30"><span class="ln">30   </span></a>    </span><span class="s0">public void </span><span class="s1">testUHIBELW11PredicateOnlyEngine() {
<a name="l31"><span class="ln">31   </span></a>        </span><span class="s2">// Setup</span><span class="s1">
<a name="l32"><span class="ln">32   </span></a>        AsymmetricCipherKeyPair keyPair = setup(</span><span class="s4">32</span><span class="s1">);
<a name="l33"><span class="ln">33   </span></a>
<a name="l34"><span class="ln">34   </span></a>        </span><span class="s2">// KeyGen</span><span class="s1">
<a name="l35"><span class="ln">35   </span></a>        Element[] ids = map(keyPair.getPublic(), </span><span class="s5">&quot;angelo&quot;</span><span class="s1">, </span><span class="s5">&quot;de caro&quot;</span><span class="s1">, </span><span class="s5">&quot;unisa&quot;</span><span class="s1">);
<a name="l36"><span class="ln">36   </span></a>
<a name="l37"><span class="ln">37   </span></a>        CipherParameters sk0 = keyGen(keyPair, ids[</span><span class="s4">0</span><span class="s1">]);
<a name="l38"><span class="ln">38   </span></a>        CipherParameters sk01 = keyGen(keyPair, ids[</span><span class="s4">0</span><span class="s1">], ids[</span><span class="s4">1</span><span class="s1">]);
<a name="l39"><span class="ln">39   </span></a>        CipherParameters sk012 = keyGen(keyPair, ids[</span><span class="s4">0</span><span class="s1">], ids[</span><span class="s4">1</span><span class="s1">], ids[</span><span class="s4">2</span><span class="s1">]);
<a name="l40"><span class="ln">40   </span></a>
<a name="l41"><span class="ln">41   </span></a>        CipherParameters sk1 = keyGen(keyPair, ids[</span><span class="s4">1</span><span class="s1">]);
<a name="l42"><span class="ln">42   </span></a>        CipherParameters sk10 = keyGen(keyPair, ids[</span><span class="s4">1</span><span class="s1">], ids[</span><span class="s4">0</span><span class="s1">]);
<a name="l43"><span class="ln">43   </span></a>        CipherParameters sk021 = keyGen(keyPair, ids[</span><span class="s4">0</span><span class="s1">], ids[</span><span class="s4">2</span><span class="s1">], ids[</span><span class="s4">1</span><span class="s1">]);
<a name="l44"><span class="ln">44   </span></a>
<a name="l45"><span class="ln">45   </span></a>        </span><span class="s2">// Encrypt</span><span class="s1">
<a name="l46"><span class="ln">46   </span></a>        </span><span class="s0">byte</span><span class="s1">[] ciphertext0 = encrypt(keyPair.getPublic(), ids[</span><span class="s4">0</span><span class="s1">]);
<a name="l47"><span class="ln">47   </span></a>        </span><span class="s0">byte</span><span class="s1">[] ciphertext01 = encrypt(keyPair.getPublic(), ids[</span><span class="s4">0</span><span class="s1">], ids[</span><span class="s4">1</span><span class="s1">]);
<a name="l48"><span class="ln">48   </span></a>        </span><span class="s0">byte</span><span class="s1">[] ciphertext012 = encrypt(keyPair.getPublic(), ids[</span><span class="s4">0</span><span class="s1">], ids[</span><span class="s4">1</span><span class="s1">], ids[</span><span class="s4">2</span><span class="s1">]);
<a name="l49"><span class="ln">49   </span></a>
<a name="l50"><span class="ln">50   </span></a>        </span><span class="s2">// Test</span><span class="s1">
<a name="l51"><span class="ln">51   </span></a>        assertEquals(</span><span class="s0">true</span><span class="s1">, test(sk0, ciphertext0));
<a name="l52"><span class="ln">52   </span></a>        assertEquals(</span><span class="s0">true</span><span class="s1">, test(sk01, ciphertext01));
<a name="l53"><span class="ln">53   </span></a>        assertEquals(</span><span class="s0">true</span><span class="s1">, test(sk012, ciphertext012));
<a name="l54"><span class="ln">54   </span></a>
<a name="l55"><span class="ln">55   </span></a>        assertEquals(</span><span class="s0">false</span><span class="s1">, test(sk1, ciphertext0));
<a name="l56"><span class="ln">56   </span></a>        assertEquals(</span><span class="s0">false</span><span class="s1">, test(sk10, ciphertext01));
<a name="l57"><span class="ln">57   </span></a>        assertEquals(</span><span class="s0">false</span><span class="s1">, test(sk021, ciphertext012));
<a name="l58"><span class="ln">58   </span></a>
<a name="l59"><span class="ln">59   </span></a>        </span><span class="s2">// Delegate and Test</span><span class="s1">
<a name="l60"><span class="ln">60   </span></a>        assertEquals(</span><span class="s0">true</span><span class="s1">, test(delegate(keyPair, sk0, ids[</span><span class="s4">1</span><span class="s1">]), ciphertext01));
<a name="l61"><span class="ln">61   </span></a>        assertEquals(</span><span class="s0">true</span><span class="s1">, test(delegate(keyPair, sk01, ids[</span><span class="s4">2</span><span class="s1">]), ciphertext012));
<a name="l62"><span class="ln">62   </span></a>        assertEquals(</span><span class="s0">true</span><span class="s1">, test(delegate(keyPair, delegate(keyPair, sk0, ids[</span><span class="s4">1</span><span class="s1">]), ids[</span><span class="s4">2</span><span class="s1">]), ciphertext012));
<a name="l63"><span class="ln">63   </span></a>
<a name="l64"><span class="ln">64   </span></a>        assertEquals(</span><span class="s0">false</span><span class="s1">, test(delegate(keyPair, sk0, ids[</span><span class="s4">2</span><span class="s1">]), ciphertext01));
<a name="l65"><span class="ln">65   </span></a>        assertEquals(</span><span class="s0">false</span><span class="s1">, test(delegate(keyPair, sk01, ids[</span><span class="s4">1</span><span class="s1">]), ciphertext012));
<a name="l66"><span class="ln">66   </span></a>        assertEquals(</span><span class="s0">false</span><span class="s1">, test(delegate(keyPair, delegate(keyPair, sk0, ids[</span><span class="s4">2</span><span class="s1">]), ids[</span><span class="s4">1</span><span class="s1">]), ciphertext012));
<a name="l67"><span class="ln">67   </span></a>    }
<a name="l68"><span class="ln">68   </span></a>
<a name="l69"><span class="ln">69   </span></a>
<a name="l70"><span class="ln">70   </span></a>    </span><span class="s0">protected </span><span class="s1">AsymmetricCipherKeyPair setup(</span><span class="s0">int </span><span class="s1">bitLength) {
<a name="l71"><span class="ln">71   </span></a>        UHIBELW11KeyPairGenerator setup = </span><span class="s0">new </span><span class="s1">UHIBELW11KeyPairGenerator();
<a name="l72"><span class="ln">72   </span></a>        setup.init(</span><span class="s0">new </span><span class="s1">UHIBELW11KeyPairGenerationParameters(bitLength));
<a name="l73"><span class="ln">73   </span></a>
<a name="l74"><span class="ln">74   </span></a>        </span><span class="s0">return </span><span class="s1">setup.generateKeyPair();
<a name="l75"><span class="ln">75   </span></a>    }
<a name="l76"><span class="ln">76   </span></a>
<a name="l77"><span class="ln">77   </span></a>    </span><span class="s0">protected </span><span class="s1">Element[] map(CipherParameters publicKey, String... ids) {
<a name="l78"><span class="ln">78   </span></a>        Pairing pairing = PairingFactory.getPairing(((UHIBELW11PublicKeyParameters) publicKey).getParameters());
<a name="l79"><span class="ln">79   </span></a>
<a name="l80"><span class="ln">80   </span></a>        Element[] elements = </span><span class="s0">new </span><span class="s1">Element[ids.length];
<a name="l81"><span class="ln">81   </span></a>        </span><span class="s0">for </span><span class="s1">(</span><span class="s0">int </span><span class="s1">i = </span><span class="s4">0</span><span class="s1">; i &lt; elements.length; i++) {
<a name="l82"><span class="ln">82   </span></a>            </span><span class="s0">byte</span><span class="s1">[] id = ids[i].getBytes();
<a name="l83"><span class="ln">83   </span></a>            elements[i] = pairing.getZr().newElementFromHash(id, </span><span class="s4">0</span><span class="s1">, id.length);
<a name="l84"><span class="ln">84   </span></a>        }
<a name="l85"><span class="ln">85   </span></a>        </span><span class="s0">return </span><span class="s1">elements;
<a name="l86"><span class="ln">86   </span></a>    }
<a name="l87"><span class="ln">87   </span></a>
<a name="l88"><span class="ln">88   </span></a>
<a name="l89"><span class="ln">89   </span></a>    </span><span class="s0">protected </span><span class="s1">CipherParameters keyGen(AsymmetricCipherKeyPair masterKey, Element... ids) {
<a name="l90"><span class="ln">90   </span></a>        UHIBELW11SecretKeyGenerator generator = </span><span class="s0">new </span><span class="s1">UHIBELW11SecretKeyGenerator();
<a name="l91"><span class="ln">91   </span></a>        generator.init(</span><span class="s0">new </span><span class="s1">UHIBELW11SecretKeyGenerationParameters(
<a name="l92"><span class="ln">92   </span></a>                (UHIBELW11MasterSecretKeyParameters) masterKey.getPrivate(),
<a name="l93"><span class="ln">93   </span></a>                (UHIBELW11PublicKeyParameters) masterKey.getPublic(),
<a name="l94"><span class="ln">94   </span></a>                ids
<a name="l95"><span class="ln">95   </span></a>        ));
<a name="l96"><span class="ln">96   </span></a>
<a name="l97"><span class="ln">97   </span></a>        </span><span class="s0">return </span><span class="s1">generator.generateKey();
<a name="l98"><span class="ln">98   </span></a>    }
<a name="l99"><span class="ln">99   </span></a>
<a name="l100"><span class="ln">100  </span></a>    </span><span class="s0">protected </span><span class="s1">CipherParameters delegate(AsymmetricCipherKeyPair masterKey, CipherParameters secretKey, Element id) {
<a name="l101"><span class="ln">101  </span></a>        UHIBELW11SecretKeyGenerator generator = </span><span class="s0">new </span><span class="s1">UHIBELW11SecretKeyGenerator();
<a name="l102"><span class="ln">102  </span></a>        generator.init(</span><span class="s0">new </span><span class="s1">UHIBELW11DelegateGenerationParameters(
<a name="l103"><span class="ln">103  </span></a>                (UHIBELW11PublicKeyParameters) masterKey.getPublic(),
<a name="l104"><span class="ln">104  </span></a>                (UHIBELW11SecretKeyParameters) secretKey,
<a name="l105"><span class="ln">105  </span></a>                id
<a name="l106"><span class="ln">106  </span></a>        ));
<a name="l107"><span class="ln">107  </span></a>
<a name="l108"><span class="ln">108  </span></a>        </span><span class="s0">return </span><span class="s1">generator.generateKey();
<a name="l109"><span class="ln">109  </span></a>    }
<a name="l110"><span class="ln">110  </span></a>
<a name="l111"><span class="ln">111  </span></a>    </span><span class="s0">protected byte</span><span class="s1">[] encrypt(CipherParameters publicKey, Element... ids) {
<a name="l112"><span class="ln">112  </span></a>        </span><span class="s0">byte</span><span class="s1">[] ciphertext = </span><span class="s0">new byte</span><span class="s1">[</span><span class="s4">0</span><span class="s1">];
<a name="l113"><span class="ln">113  </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l114"><span class="ln">114  </span></a>            AsymmetricBlockCipher engine = </span><span class="s0">new </span><span class="s1">UHIBELW11PredicateOnlyEngine();
<a name="l115"><span class="ln">115  </span></a>            engine.init(</span><span class="s0">true</span><span class="s1">, </span><span class="s0">new </span><span class="s1">UHIBELW11EncryptionParameters((UHIBELW11PublicKeyParameters) publicKey, ids));
<a name="l116"><span class="ln">116  </span></a>            ciphertext = engine.processBlock(</span><span class="s0">new byte</span><span class="s1">[</span><span class="s4">0</span><span class="s1">], </span><span class="s4">0</span><span class="s1">, </span><span class="s4">0</span><span class="s1">);
<a name="l117"><span class="ln">117  </span></a>
<a name="l118"><span class="ln">118  </span></a>            assertNotNull(ciphertext);
<a name="l119"><span class="ln">119  </span></a>            assertNotSame(</span><span class="s4">0</span><span class="s1">, ciphertext.length);
<a name="l120"><span class="ln">120  </span></a>        } </span><span class="s0">catch </span><span class="s1">(InvalidCipherTextException e) {
<a name="l121"><span class="ln">121  </span></a>            e.printStackTrace();
<a name="l122"><span class="ln">122  </span></a>            fail(e.getMessage());
<a name="l123"><span class="ln">123  </span></a>        }
<a name="l124"><span class="ln">124  </span></a>
<a name="l125"><span class="ln">125  </span></a>        </span><span class="s0">return </span><span class="s1">ciphertext;
<a name="l126"><span class="ln">126  </span></a>    }
<a name="l127"><span class="ln">127  </span></a>
<a name="l128"><span class="ln">128  </span></a>    </span><span class="s0">protected boolean </span><span class="s1">test(CipherParameters secretKey, </span><span class="s0">byte</span><span class="s1">[] cipherText) {
<a name="l129"><span class="ln">129  </span></a>        </span><span class="s0">byte</span><span class="s1">[] plainText = </span><span class="s0">new byte</span><span class="s1">[</span><span class="s4">0</span><span class="s1">];
<a name="l130"><span class="ln">130  </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l131"><span class="ln">131  </span></a>            AsymmetricBlockCipher engine = </span><span class="s0">new </span><span class="s1">UHIBELW11PredicateOnlyEngine();
<a name="l132"><span class="ln">132  </span></a>            </span><span class="s2">// Decrypt</span><span class="s1">
<a name="l133"><span class="ln">133  </span></a>            engine.init(</span><span class="s0">false</span><span class="s1">, secretKey);
<a name="l134"><span class="ln">134  </span></a>            plainText = engine.processBlock(cipherText, </span><span class="s4">0</span><span class="s1">, cipherText.length);
<a name="l135"><span class="ln">135  </span></a>
<a name="l136"><span class="ln">136  </span></a>            assertNotNull(plainText);
<a name="l137"><span class="ln">137  </span></a>            assertNotSame(</span><span class="s4">0</span><span class="s1">, plainText.length);
<a name="l138"><span class="ln">138  </span></a>        } </span><span class="s0">catch </span><span class="s1">(InvalidCipherTextException e) {
<a name="l139"><span class="ln">139  </span></a>            e.printStackTrace();
<a name="l140"><span class="ln">140  </span></a>            fail(e.getMessage());
<a name="l141"><span class="ln">141  </span></a>        }
<a name="l142"><span class="ln">142  </span></a>
<a name="l143"><span class="ln">143  </span></a>        </span><span class="s0">return </span><span class="s1">plainText[</span><span class="s4">0</span><span class="s1">] == </span><span class="s4">1</span><span class="s1">; </span><span class="s2">// Meaning that the predicate is satisfied</span><span class="s1">
<a name="l144"><span class="ln">144  </span></a>    }
<a name="l145"><span class="ln">145  </span></a>}
<a name="l146"><span class="ln">146  </span></a>
<a name="l147"><span class="ln">147  </span></a></span></pre>
        </section>

    </body>
</document>
