<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>Java Pairing-Based Cryptography Library : Schemes - (AHIBE) Anonymous Hierarchical Identity Based Encryption</title>
        <author email="decaro@dia.unisa.it">Angelo De Caro</author>
    </properties>

    <body>
        <section name="Schemes - (AHIBE) Anonymous Hierarchical Identity Based Encryption">
            <p>
                Lewko and Waters [Eurocrypt 2010] presented a fully secure HIBE
                with short ciphertexts.  In this paper we show how to modify
                their construction to achieve anonymity.
                We prove the security of our scheme under static (and generically secure)
                assumptions formulated in composite order bilinear groups.

                In addition, we present a
                fully secure Anonymous IBE in the secret-key setting.
                Secret-Key Anonymous IBE was implied by the work of
                [Shen-Shi-Waters - TCC 2009] which can be shown secure
                in the selective-id model.
                No previous fully secure construction of secret-key Anonymous IBE is known.                
            </p>

            <p>
                URL:
                <a href="http://eprint.iacr.org/2010/197.pdf">
                    http://eprint.iacr.org/2010/197.pdf
                </a>
            </p>

            <p>
                In this page we will see how to use
                <font style="font-weight: bold;color:red"><a href="#HVE">AHIBE</a></font>,
                in the context of the Bouncy Castle framework.
            </p>
        </section>

        <a name="AHIBE"/>
        <section name="AHIBE">
            <p>
                You will find all the sources into the jpbc-crypto module.
            </p>

            <subsection name="Generate and Store the Public Information">
                <source>
import AHIBESetupGenerator;

<font style="font-weight: bold;color:green">// Init the generator.</font>
AHIBESetupGenerationParameters setupGenerationParameters = new AHIBESetupGenerationParameters(
        40,     // bit length
        10      // identity vector max length
);
AHIBESetupGenerator ahibeSetupGenerator = new AHIBESetupGenerator();
ahibeSetupGenerator.init(setupGenerationParameters);

<font style="font-weight: bold;color:green">// Generate the parameters.</font>
AsymmetricCipherKeyPair keyPair = ahibeSetupGenerator.generateKeyPair();

AHIBEPublicKeyParameters publicKey =
                    (AHIBEPublicKeyParameters) keyPair.getPublic();
AHIBEMasterSecretKeyParameters masterSecretKey =
                    (AHIBEMasterSecretKeyParameters) keyPair.getPrivate();

<font style="font-weight: bold;color:green">// Store the parameters in a file.</font>
FileOutputStream fileOutputStream = new FileOutputStream("ahibe_setup.params");

ahibeSetupGenerator.store(fileOutputStream, utmaParameters);

fileOutputStream.flush();
fileOutputStream.close();
                </source>
            </subsection>

            <subsection name="Load the Public Information">
                <source>
import UTMAStrongParametersGenerator;
import UTMAStrongParameters;

<font style="font-weight: bold;color:green">// Init the generator.</font>
AHIBESetupGenerationParameters setupGenerationParameters = new AHIBESetupGenerationParameters();

<font style="font-weight: bold;color:green">// Load the parameters from a file.</font>
FileInputStream fileInputStream = new FileInputStream("ahibe_setup.params");

AsymmetricCipherKeyPair keyPair = setupGenerationParameters.load(fileInputStream);

fileInputStream.close();
                </source>
            </subsection>

            <subsection name="Generate and Store a SecretKey">
                <source>

<font style="font-weight: bold;color:green">// Setup and identity vector.</font>
Element[] ids = new Element[2];
ids[0] = pairing.getZr().newRandomElement().getImmutable();
ids[1] = pairing.getZr().newRandomElement().getImmutable();

<font style="font-weight: bold;color:green">// Init the generator.</font>
KeyGenerationParameters secretKeyGenerationParameters =
        new AHIBESecretKeyGenerationParameters(
                (AHIBEMasterSecretKeyParameters) masterKey.getPrivate(),
                (AHIBEPublicKeyParameters) masterKey.getPublic(),
                ids
        );
AHIBESecretKeyGenerator secretKeyGenerator = new AHIBESecretKeyGenerator();
secretKeyGenerator.init(secretKeyGenerationParameters);

<font style="font-weight: bold;color:green">// Generate the secretKey.</font>
CipherParameters secretKey = secretKeyGenerator.generateKey();

<font style="font-weight: bold;color:green">// Store the secretKey.</font>
fileOutputStream = new FileOutputStream("ahibe_secretkey.params");

secretKeyGenerator.store(fileOutputStream, secretKey);

fileOutputStream.flush();
fileOutputStream.close();
                </source>
            </subsection>

            <subsection name="Load a SecretKey">
                <source>

<font style="font-weight: bold;color:green">// Init the generator.</font>
AHIBESecretKeyGenerationParameters secretKeyGenerationParameters =
                    new AHIBESecretKeyGenerationParameters();

<font style="font-weight: bold;color:green">// Load the key-pair from a file.</font>
fileInputStream = new FileInputStream("ahibe_secretkey.params");

CipherParameters secretKey = secretKeyGenerationParameters.load(fileInputStream);

fileInputStream.close();
                </source>
            </subsection>

            <subsection name="Encrypt">
                <source>
<font style="font-weight: bold;color:green">// Init the engine.</font>
AsymmetricBlockCipher engine = new MultiBlockAsymmetricBlockCipher(
        new AHIBEEngine(),
        new PKCS7Padding()
);

<font style="font-weight: bold;color:green">// Encrypt</font>
String message = "Hello World!!!";
byte[] messageAsBytes = message.getBytes();

engine.init(true, new AHIBESEncryptionParameters(publicKey, ids));
byte[] cipherText = engine.processBlock(messageAsBytes, 0, messageAsBytes.length);
                </source>
            </subsection>

            <subsection name="Decrypt">
                <source>
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import it.unisa.dia.gas.plaf.crypto.engines.MultiBlockAsymmetricBlockCipher;

<font style="font-weight: bold;color:green">// Init the engine.</font>
AsymmetricBlockCipher engine = new MultiBlockAsymmetricBlockCipher(
        new AHIBEEngine(),
        new PKCS7Padding()
);

<font style="font-weight: bold;color:green">// Decrypt</font>
engine.init(false, secretKey);
byte[] plainText = engine.processBlock(cipherText, 0, cipherText.length);
                </source>
            </subsection>

            <subsection name="Delegate">
                <source>
<font style="font-weight: bold;color:green">// Setup and identity vector.</font>
Element id = pairing.getZr().newRandomElement().getImmutable();

<font style="font-weight: bold;color:green">// Init the generator.</font>
KeyGenerationParameters secretKeyGenerationParameters = new AHIBEDelegateSecretKeyGenerationParameters(
                publicKey,
                (AHIBESecretKeyParameters) secretKey,
                id
);
AHIBESecretKeyGenerator secretKeyGenerator = new AHIBESecretKeyGenerator();
secretKeyGenerator.init(secretKeyGenerationParameters);

<font style="font-weight: bold;color:green">// Generate the secretKey.</font>
CipherParameters secretKey = secretKeyGenerationParameters.generateKey();

<font style="font-weight: bold;color:green">// Store the secretKey.</font>
fileOutputStream = new FileOutputStream("ahibe_secretkey.params");

secretKeyGenerator.store(fileOutputStream, secretKey);

fileOutputStream.flush();
fileOutputStream.close();
                </source>
            </subsection>

        </section>

    </body>
</document>
