<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>Java Pairing-Based Cryptography Library : Untraceable (RIFD) Tags based on Mild Assumptions</title>
        <author email="decaro@dia.unisa.it">Angelo De Caro</author>
    </properties>

    <body>
        <section name="Untraceable (RIFD) Tags based on Mild Assumptions">
            <subsection name="Authors">
                C. Blundo and A. De Caro and G. Persiano
            </subsection>
            <subsection name="Abstact">
                Radio frequency identification (RFID) chips have been widely deployed in
                large-scale systems such as inventory control and supply chain management.
                While RFID technology has much advantage, however it may create new
                problems to privacy. Tag untraceability is a significant concern that
                needs to be addressed in deploying RFID-based system.

                Our construction is the first construction in the symmetric bilinear
                setting based on a mild assumption.
                That is our assumption is tautological in the generic group model
                and is ''efficiently falsifiable'' in the sense that its problem
                instances are stated non-interactively and concisely (i.e., independently
                of the number of adversarial queries and other large quantities).
            </subsection>
            <subsection name="URL">
                <a href="http://eprint.iacr.org/2009/380.pdf">
                    http://eprint.iacr.org/2009/380.pdf
                </a>
            </subsection>
        </section>

        <section name="Usage">
<pre>

<a name="l1"><span class="ln">1    </span></a><span class="s0">package </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.encryption.ut.bdp10;
<a name="l2"><span class="ln">2    </span></a>
<a name="l3"><span class="ln">3    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.engines.kem.KeyEncapsulationMechanism;
<a name="l4"><span class="ln">4    </span></a></span><span class="s0">import <a href="../../../../../../../../../it/unisa/dia/gas/crypto/jpbc/AbstractJPBCCryptoTest.java.html">it.unisa.dia.gas.crypto.jpbc.AbstractJPBCCryptoTest</a></span><span class="s1">;
<a name="l5"><span class="ln">5    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.encryption.ut.bdp10.engines.UTBDP10StrongKEMEngine;
<a name="l6"><span class="ln">6    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.encryption.ut.bdp10.generators.UTBDP10StrongKeyPairGenerator;
<a name="l7"><span class="ln">7    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.encryption.ut.bdp10.generators.UTBDP10StrongParametersGenerator;
<a name="l8"><span class="ln">8    </span></a></span><span class="s0">import </span><span class="s1">it.unisa.dia.gas.crypto.jpbc.encryption.ut.bdp10.params.*;
<a name="l9"><span class="ln">9    </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.AsymmetricCipherKeyPair;
<a name="l10"><span class="ln">10   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.CipherParameters;
<a name="l11"><span class="ln">11   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.InvalidCipherTextException;
<a name="l12"><span class="ln">12   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.generators.ElGamalParametersGenerator;
<a name="l13"><span class="ln">13   </span></a></span><span class="s0">import </span><span class="s1">org.bouncycastle.crypto.params.ElGamalParameters;
<a name="l14"><span class="ln">14   </span></a></span><span class="s0">import </span><span class="s1">org.junit.Test;
<a name="l15"><span class="ln">15   </span></a>
<a name="l16"><span class="ln">16   </span></a></span><span class="s0">import </span><span class="s1">java.security.SecureRandom;
<a name="l17"><span class="ln">17   </span></a></span><span class="s0">import </span><span class="s1">java.util.Arrays;
<a name="l18"><span class="ln">18   </span></a>
<a name="l19"><span class="ln">19   </span></a></span><span class="s0">import static </span><span class="s1">org.junit.Assert.*;
<a name="l20"><span class="ln">20   </span></a>
<a name="l21"><span class="ln">21   </span></a></span><span class="s2">/**
<a name="l22"><span class="ln">22   </span></a> * </span><span class="s3">@author </span><span class="s2">Angelo De Caro (angelo.decaro@gmail.com)
<a name="l23"><span class="ln">23   </span></a> */</span><span class="s1">
<a name="l24"><span class="ln">24   </span></a></span><span class="s0">public class </span><span class="s1">UTBDP10StrongKEMEngineTest </span><span class="s0">extends <a href="../../../../../../../../../it/unisa/dia/gas/crypto/jpbc/AbstractJPBCCryptoTest.java.html">AbstractJPBCCryptoTest</a> </span><span class="s1">{
<a name="l25"><span class="ln">25   </span></a>
<a name="l26"><span class="ln">26   </span></a>
<a name="l27"><span class="ln">27   </span></a>    </span><span class="s0">public </span><span class="s1">UTBDP10StrongKEMEngineTest(</span><span class="s0">boolean </span><span class="s1">usePBC, String curvePath) {
<a name="l28"><span class="ln">28   </span></a>        </span><span class="s0">super</span><span class="s1">(usePBC, curvePath);
<a name="l29"><span class="ln">29   </span></a>    }
<a name="l30"><span class="ln">30   </span></a>
<a name="l31"><span class="ln">31   </span></a>
<a name="l32"><span class="ln">32   </span></a>    @Test
<a name="l33"><span class="ln">33   </span></a>    </span><span class="s0">public void </span><span class="s1">testUTBDP10StrongKEMEngine() {
<a name="l34"><span class="ln">34   </span></a>        UTBDP10StrongParameters parameters = createParameters(</span><span class="s4">1024</span><span class="s1">);
<a name="l35"><span class="ln">35   </span></a>        AsymmetricCipherKeyPair keyPair = setup(parameters);
<a name="l36"><span class="ln">36   </span></a>
<a name="l37"><span class="ln">37   </span></a>        </span><span class="s0">byte</span><span class="s1">[][] ct = encaps(keyPair.getPublic());
<a name="l38"><span class="ln">38   </span></a>
<a name="l39"><span class="ln">39   </span></a>        assertEquals(</span><span class="s0">true</span><span class="s1">, Arrays.equals(ct[</span><span class="s4">0</span><span class="s1">], decaps(keyPair.getPrivate(), ct[</span><span class="s4">1</span><span class="s1">])));
<a name="l40"><span class="ln">40   </span></a>        assertEquals(</span><span class="s0">true</span><span class="s1">, Arrays.equals(ct[</span><span class="s4">0</span><span class="s1">], decaps(keyPair.getPrivate(),
<a name="l41"><span class="ln">41   </span></a>                randomize(parameters.getPublicParameters(), parameters.getRPublicParameters(), ct[</span><span class="s4">1</span><span class="s1">]))));
<a name="l42"><span class="ln">42   </span></a>    }
<a name="l43"><span class="ln">43   </span></a>
<a name="l44"><span class="ln">44   </span></a>
<a name="l45"><span class="ln">45   </span></a>    </span><span class="s0">protected </span><span class="s1">UTBDP10StrongParameters createParameters(</span><span class="s0">int </span><span class="s1">elgamalLength) {
<a name="l46"><span class="ln">46   </span></a>        ElGamalParametersGenerator elGamalParametersGenerator = </span><span class="s0">new </span><span class="s1">ElGamalParametersGenerator();
<a name="l47"><span class="ln">47   </span></a>        elGamalParametersGenerator.init(elgamalLength, </span><span class="s4">12</span><span class="s1">, </span><span class="s0">new </span><span class="s1">SecureRandom());
<a name="l48"><span class="ln">48   </span></a>        ElGamalParameters elGamalParameters = elGamalParametersGenerator.generateParameters();
<a name="l49"><span class="ln">49   </span></a>
<a name="l50"><span class="ln">50   </span></a>        UTBDP10StrongParametersGenerator generator = </span><span class="s0">new </span><span class="s1">UTBDP10StrongParametersGenerator();
<a name="l51"><span class="ln">51   </span></a>        generator.init(curveParameters, elGamalParameters);
<a name="l52"><span class="ln">52   </span></a>        </span><span class="s0">return </span><span class="s1">generator.generateParameters();
<a name="l53"><span class="ln">53   </span></a>    }
<a name="l54"><span class="ln">54   </span></a>
<a name="l55"><span class="ln">55   </span></a>    </span><span class="s0">protected </span><span class="s1">AsymmetricCipherKeyPair setup(UTBDP10StrongParameters parameters) {
<a name="l56"><span class="ln">56   </span></a>        UTBDP10StrongKeyPairGenerator setup = </span><span class="s0">new </span><span class="s1">UTBDP10StrongKeyPairGenerator();
<a name="l57"><span class="ln">57   </span></a>        setup.init(</span><span class="s0">new </span><span class="s1">UTBDP10StrongKeyGenerationParameters(</span><span class="s0">new </span><span class="s1">SecureRandom(), parameters));
<a name="l58"><span class="ln">58   </span></a>
<a name="l59"><span class="ln">59   </span></a>        </span><span class="s0">return </span><span class="s1">setup.generateKeyPair();
<a name="l60"><span class="ln">60   </span></a>    }
<a name="l61"><span class="ln">61   </span></a>
<a name="l62"><span class="ln">62   </span></a>    </span><span class="s0">protected byte</span><span class="s1">[][] encaps(CipherParameters publicKey) {
<a name="l63"><span class="ln">63   </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l64"><span class="ln">64   </span></a>            KeyEncapsulationMechanism kem = </span><span class="s0">new </span><span class="s1">UTBDP10StrongKEMEngine();
<a name="l65"><span class="ln">65   </span></a>            kem.init(</span><span class="s0">true</span><span class="s1">, publicKey);
<a name="l66"><span class="ln">66   </span></a>
<a name="l67"><span class="ln">67   </span></a>            </span><span class="s0">byte</span><span class="s1">[] ciphertext = kem.processBlock(</span><span class="s0">new byte</span><span class="s1">[</span><span class="s4">0</span><span class="s1">], </span><span class="s4">0</span><span class="s1">, </span><span class="s4">0</span><span class="s1">);
<a name="l68"><span class="ln">68   </span></a>
<a name="l69"><span class="ln">69   </span></a>            assertNotNull(ciphertext);
<a name="l70"><span class="ln">70   </span></a>            assertNotSame(</span><span class="s4">0</span><span class="s1">, ciphertext.length);
<a name="l71"><span class="ln">71   </span></a>
<a name="l72"><span class="ln">72   </span></a>            </span><span class="s0">byte</span><span class="s1">[] key = Arrays.copyOfRange(ciphertext, </span><span class="s4">0</span><span class="s1">, kem.getKeyBlockSize());
<a name="l73"><span class="ln">73   </span></a>            </span><span class="s0">byte</span><span class="s1">[] ct = Arrays.copyOfRange(ciphertext, kem.getKeyBlockSize(), ciphertext.length);
<a name="l74"><span class="ln">74   </span></a>
<a name="l75"><span class="ln">75   </span></a>            </span><span class="s0">return new byte</span><span class="s1">[][]{key, ct};
<a name="l76"><span class="ln">76   </span></a>        } </span><span class="s0">catch </span><span class="s1">(InvalidCipherTextException e) {
<a name="l77"><span class="ln">77   </span></a>            e.printStackTrace();
<a name="l78"><span class="ln">78   </span></a>            fail(e.getMessage());
<a name="l79"><span class="ln">79   </span></a>        }
<a name="l80"><span class="ln">80   </span></a>        </span><span class="s0">return null</span><span class="s1">;
<a name="l81"><span class="ln">81   </span></a>    }
<a name="l82"><span class="ln">82   </span></a>
<a name="l83"><span class="ln">83   </span></a>    </span><span class="s0">protected byte</span><span class="s1">[] decaps(CipherParameters privateKey, </span><span class="s0">byte</span><span class="s1">[] ciphertext) {
<a name="l84"><span class="ln">84   </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l85"><span class="ln">85   </span></a>            KeyEncapsulationMechanism engine = </span><span class="s0">new </span><span class="s1">UTBDP10StrongKEMEngine();
<a name="l86"><span class="ln">86   </span></a>            engine.init(</span><span class="s0">false</span><span class="s1">, privateKey);
<a name="l87"><span class="ln">87   </span></a>
<a name="l88"><span class="ln">88   </span></a>            </span><span class="s0">return </span><span class="s1">engine.processBlock(ciphertext, </span><span class="s4">0</span><span class="s1">, ciphertext.length);
<a name="l89"><span class="ln">89   </span></a>        } </span><span class="s0">catch </span><span class="s1">(InvalidCipherTextException e) {
<a name="l90"><span class="ln">90   </span></a>            e.printStackTrace();
<a name="l91"><span class="ln">91   </span></a>            fail(e.getMessage());
<a name="l92"><span class="ln">92   </span></a>            </span><span class="s0">throw new </span><span class="s1">RuntimeException(e);
<a name="l93"><span class="ln">93   </span></a>        }
<a name="l94"><span class="ln">94   </span></a>    }
<a name="l95"><span class="ln">95   </span></a>
<a name="l96"><span class="ln">96   </span></a>    </span><span class="s0">protected byte</span><span class="s1">[] randomize(UTBDP10StrongPublicParameters publicParameters,
<a name="l97"><span class="ln">97   </span></a>                               UTBDP10StrongRPublicParameters rPublicParameters,
<a name="l98"><span class="ln">98   </span></a>                               </span><span class="s0">byte</span><span class="s1">[] ciphertext) {
<a name="l99"><span class="ln">99   </span></a>        </span><span class="s0">try </span><span class="s1">{
<a name="l100"><span class="ln">100  </span></a>            KeyEncapsulationMechanism engine = </span><span class="s0">new </span><span class="s1">UTBDP10StrongKEMEngine();
<a name="l101"><span class="ln">101  </span></a>            engine.init(</span><span class="s0">true</span><span class="s1">, </span><span class="s0">new </span><span class="s1">UTBDP10StrongRandomizeParameters(publicParameters, rPublicParameters));
<a name="l102"><span class="ln">102  </span></a>
<a name="l103"><span class="ln">103  </span></a>            </span><span class="s0">return </span><span class="s1">engine.processBlock(ciphertext, </span><span class="s4">0</span><span class="s1">, ciphertext.length);
<a name="l104"><span class="ln">104  </span></a>        } </span><span class="s0">catch </span><span class="s1">(InvalidCipherTextException e) {
<a name="l105"><span class="ln">105  </span></a>            e.printStackTrace();
<a name="l106"><span class="ln">106  </span></a>            fail(e.getMessage());
<a name="l107"><span class="ln">107  </span></a>            </span><span class="s0">throw new </span><span class="s1">RuntimeException(e);
<a name="l108"><span class="ln">108  </span></a>        }
<a name="l109"><span class="ln">109  </span></a>    }
<a name="l110"><span class="ln">110  </span></a>
<a name="l111"><span class="ln">111  </span></a>}</span></pre>
        </section>
    </body>
</document>
