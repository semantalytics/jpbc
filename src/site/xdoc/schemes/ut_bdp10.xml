<!DOCTYPE document PUBLIC
        "-//Apache Software Foundation//DTD XDOC 1.0//EN"
        "http://maven.apache.org/dtd/xdoc_1_0.dtd">
<document>
    <properties>
        <title>Java Pairing-Based Cryptography Library : Schemes - Untraceable (RIFD) Tags based on Mild Assumptions</title>
        <author email="decaro@dia.unisa.it">Angelo De Caro</author>
    </properties>

    <body>
        <section name="Schemes - Untraceable (RIFD) Tags based on Mild Assumptions">
            <p>
                Radio frequency identification (RFID) chips have been widely deployed in
                large-scale systems such as inventory control and supply chain management.
                While RFID technology has much advantage, however it may create new
                problems to privacy. Tag untraceability is a significant concern that
                needs to be addressed in deploying RFID-based system.

                Our construction is the first construction in the symmetric bilinear
                setting based on a mild assumption.
                That is our assumption is tautological in the generic group model
                and is ''efficiently falsifiable'' in the sense that its problem
                instances are stated non-interactively and concisely (i.e., independently
                of the number of adversarial queries and other large quantities).
            </p>

            <p>
                URL:
                <a href="http://eprint.iacr.org/2009/380.pdf">
                    http://eprint.iacr.org/2009/380.pdf
                </a>
            </p>

            <p>
                In this page we will see how to use the
                <font style="font-weight: bold;color:red"><a href="#strong">Strong Construction</a></font>,
                in the context of the Bouncy Castle framework.
            </p>

        </section>

        <a name="strong"/>
        <section name="Strong Construction">

            <p>
                You will find all the sources into the jpbc-crypto module.
            </p>

            <subsection name="Generate and Store the Public Information">
                <source>
import UTMAStrongParametersGenerator;
import UTMAStrongParameters;

<font style="font-weight: bold;color:green">// Init the generator.</font>
UTMAStrongParametersGenerator pubInfoGenerator = new UTMAStrongParametersGenerator();
pubInfoGenerator.init(curveParams, new ElGamalParameters(p, g, l));

<font style="font-weight: bold;color:green">// Generate the parameters.</font>
UTMAStrongParameters utmaParameters = pubInfoGenerator.generateParameters();

<font style="font-weight: bold;color:green">// Store the parameters in a file.</font>
FileOutputStream fileOutputStream = new FileOutputStream("utmas.params");

pubInfoGenerator.store(fileOutputStream, utmaParameters);

fileOutputStream.flush();
fileOutputStream.close();
                </source>
            </subsection>

            <subsection name="Load the Public Information">
                <source>
import UTMAStrongParametersGenerator;
import UTMAStrongParameters;

<font style="font-weight: bold;color:green">// Init the generator.</font>
UTMAStrongParametersGenerator pubInfoGenerator = new UTMAStrongParametersGenerator();

<font style="font-weight: bold;color:green">// Load the parameters from a file.</font>
FileInputStream fileInputStream = new FileInputStream("utmas.params");

UTMAStrongParameters utmaParameters = pubInfoGenerator.load(fileInputStream);

fileInputStream.close();
                </source>
            </subsection>

            <subsection name="Generate and Store a Key-Pair">
                <source>
import UTMAStrongKeyPairGenerator;
import UTMAStrongKeyGenerationParameters;
import org.bouncycastle.crypto.AsymmetricCipherKeyPair;

<font style="font-weight: bold;color:green">// Init the generator.</font>
UTMAStrongKeyPairGenerator keyPairGenerator = new UTMAStrongKeyPairGenerator();
keyPairGenerator.init(new UTMAStrongKeyGenerationParameters(new SecureRandom(), utmaParameters));

<font style="font-weight: bold;color:green">// Generate the key-pair.</font>
AsymmetricCipherKeyPair keyPair = keyPairGenerator.generateKeyPair();

<font style="font-weight: bold;color:green">// Store the key-pair.</font>
fileOutputStream = new FileOutputStream("utmas_keypair.params");

utmaStrongKeyPairGenerator.store(fileOutputStream, keyPair);

fileOutputStream.flush();
fileOutputStream.close();
                </source>
            </subsection>

            <subsection name="Load a Key-Pair">
                <source>
import UTMAStrongKeyPairGenerator;
import UTMAStrongKeyGenerationParameters;
import org.bouncycastle.crypto.AsymmetricCipherKeyPair;

<font style="font-weight: bold;color:green">// Init the generator.</font>
UTMAStrongKeyPairGenerator keyPairGenerator = new UTMAStrongKeyPairGenerator();

<font style="font-weight: bold;color:green">// Load the key-pair from a file.</font>
fileInputStream = new FileInputStream("utmas_keypair.params");

AsymmetricCipherKeyPair keyPair = utmaStrongKeyPairGenerator.load(fileInputStream);

fileInputStream.close();
                </source>
            </subsection>

            <subsection name="Encrypt">
                <source>
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import MultiBlockAsymmetricBlockCipher;
import UTMAStrongEngine;

<font style="font-weight: bold;color:green">// Init the engine.</font>
AsymmetricBlockCipher strongEngine = new MultiBlockAsymmetricBlockCipher(
        new UTMAStrongEngine(),
        new PKCS7Padding()
);

<font style="font-weight: bold;color:green">// Encrypt</font>
String message = "Hello World!!!";
byte[] messageAsBytes = message.getBytes();

strongEngine.init(true, keyPair.getPublic());
byte[] cipherText = strongEngine.processBlock(messageAsBytes, 0, messageAsBytes.length);
                </source>
            </subsection>

            <subsection name="Decrypt">
                <source>
import org.bouncycastle.crypto.AsymmetricBlockCipher;
import MultiBlockAsymmetricBlockCipher;
import UTMAStrongEngine;

<font style="font-weight: bold;color:green">// Init the engine.</font>
AsymmetricBlockCipher strongEngine = new MultiBlockAsymmetricBlockCipher(
        new UTMAStrongEngine(),
        new PKCS7Padding()
);

<font style="font-weight: bold;color:green">// Decrypt</font>
strongEngine.init(false, keyPair.getPrivate());
byte[] plainText = strongEngine.processBlock(cipherText, 0, cipherText.length);
                </source>
            </subsection>

            <subsection name="Randomize">
                <source>
import UTMAStrongRandomizer;

<font style="font-weight: bold;color:green">// Init the engine.</font>
UTMAStrongRandomizer randomizer = new UTMAStrongRandomizer();
randomizer.init(utmaParameters);

<font style="font-weight: bold;color:green">// Re-Randomize</font>
cipherText = randomizer.processBlock(cipherText, 0, cipherText.length);
                </source>
            </subsection>
        </section>
    </body>
</document>
